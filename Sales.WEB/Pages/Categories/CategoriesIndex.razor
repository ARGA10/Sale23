@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Categorías</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/categories/create">Nueva Categoría</a>
</div>

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Categoría</th>
                    @*<th>Estados / Departamentos</th>*@
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>

                        <td style="width:200px">
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>

</GenericList>


@if (Categories is null)
{
    @*<p>Cargando...</p>*@

}
else
{

}

@code {
    public List<Category>? Categories { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHppt = await repository.Get<List<Category>>("/api/categories");
        Categories = responseHppt.Response!;
    }
    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        if (string.IsNullOrEmpty(result.Value))
        {
            return;
        }
        var responseHttp = await repository.Delete($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await LoadAsync();

    }
}
